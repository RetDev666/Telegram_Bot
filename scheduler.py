import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any
from database import db
from config import ADMIN_USER_IDS, ADMIN_DAILY_REPORT_HOUR, ADMIN_DAILY_REPORT_MINUTE
from utils import format_duration, format_number, create_table_report

logger = logging.getLogger(__name__)

class AdminReportScheduler:
    def __init__(self, bot_application):
        self.bot_application = bot_application
        self.is_running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
        if self.is_running:
            return
            
        self.is_running = True
        logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞–ø—É—â–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
        await self.run_scheduler()
    
    async def run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        while self.is_running:
            try:
                now = datetime.now()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –¥–ª—è –∑–≤—ñ—Ç—É
                if (now.hour == ADMIN_DAILY_REPORT_HOUR and 
                    now.minute == ADMIN_DAILY_REPORT_MINUTE):
                    
                    await self.send_daily_report_to_admins()
                    
                    # –ß–µ–∫–∞—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É —â–æ–± –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    await asyncio.sleep(60)
                else:
                    # –ß–µ–∫–∞—Ç–∏ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                    await asyncio.sleep(30)
                    
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É: {e}")
                await asyncio.sleep(60)
    
    async def send_daily_report_to_admins(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            today = datetime.now().date()
            report = await self.generate_daily_report(today)
            
            if not report:
                logger.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É")
                return
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç –∫–æ–∂–Ω–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            for admin_id in ADMIN_USER_IDS:
                try:
                    await self.bot_application.bot.send_message(
                        chat_id=admin_id,
                        text=report,
                        parse_mode='HTML'
                    )
                    logger.info(f"–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
    
    async def generate_daily_report(self, date) -> str:
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç"""
        try:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            daily_stats = db.get_daily_stats(date)
            
            if not daily_stats:
                return ""
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –¥–µ–Ω—å
            active_users = db.get_active_users_for_date(date)
            
            report = f"""ü§ñ <b>–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç TikTok Bot</b> üìä
üìÖ <b>–î–∞—Ç–∞:</b> {date.strftime('%d.%m.%Y')}
üïò <b>–ß–∞—Å –∑–≤—ñ—Ç—É:</b> {datetime.now().strftime('%H:%M')}

üìà <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{len(active_users)}</b>
üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: <b>{daily_stats.get('total_sessions', 0)}</b>
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{format_duration(daily_stats.get('total_duration', 0))}</b>
üëÅÔ∏è –ó–∞–≥–∞–ª—å–Ω—ñ –≥–ª—è–¥–∞—á—ñ: <b>{format_number(daily_stats.get('total_viewers', 0))}</b>
üéÅ –ó–∞–≥–∞–ª—å–Ω—ñ –¥–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫–∏: <b>{format_number(daily_stats.get('total_gifters', 0))}</b>
üíé –ó–∞–≥–∞–ª—å–Ω—ñ –∞–ª–º–∞–∑–∏: <b>{format_number(daily_stats.get('total_diamonds', 0))}</b>

"""
            
            # –î–æ–¥–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            if active_users:
                report += "<b>üèÜ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –¥–µ–Ω—å:</b>\n"
                for i, user in enumerate(active_users[:5], 1):
                    user_data = db.get_user(user['user_id'])
                    nickname = user_data['tiktok_nickname'] if user_data else f"ID:{user['user_id']}"
                    report += f"{i}. {nickname} - {user['sessions']} —Å–µ—Å—ñ–π, {format_duration(user['total_duration'])}\n"
                
                report += "\n"
            
            # –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏
            total_users = db.get_total_users_count()
            report += f"üë§ <b>–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b> {total_users}\n"
            report += f"üöÄ <b>–ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ 24/7</b>\n\n"
            
            report += "‚ÑπÔ∏è <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–≤—ñ—Ç –≤—ñ–¥ TikTok Analytics Bot</i>"
            
            return report
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
            return ""
    
    def stop(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
        self.is_running = False
        logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
scheduler = None

async def start_scheduler(bot_application):
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
    global scheduler
    scheduler = AdminReportScheduler(bot_application)
    await scheduler.start()

def stop_scheduler():
    """–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
    global scheduler
    if scheduler:
        scheduler.stop() 