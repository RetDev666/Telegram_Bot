import logging
import os
import tempfile
from typing import Dict, Set
from datetime import datetime, timedelta
import asyncio
from collections import defaultdict
import time
import sys
import platform

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

from config import (
    BOT_TOKEN, ADMIN_USER_IDS, MESSAGES, MAX_FILE_SIZE, ALLOWED_EXTENSIONS,
    RATE_LIMIT_MESSAGES, RATE_LIMIT_PERIOD, STATS_WORK_START_HOUR, STATS_WORK_END_HOUR
)
from database import db
from ocr_processor import ocr_processor
from scheduler import start_scheduler
from utils import create_user_stats_message, format_duration, format_number, create_table_report, create_csv_report, create_user_detailed_csv, create_all_users_csv_package

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Rate limiting
user_message_history: Dict[int, list] = defaultdict(list)

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states: Dict[int, str] = {}

class TikTokStatsBot:
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        self.application = None
        
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in ADMIN_USER_IDS
    
    def is_working_hours(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞—Ä–∞–∑ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (7:00-19:00)"""
        current_hour = datetime.now().hour
        return STATS_WORK_START_HOUR <= current_hour < STATS_WORK_END_HOUR
    
    def check_rate_limit(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ rate limit –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        now = time.time()
        user_history = user_message_history[user_id]
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏
        user_history[:] = [msg_time for msg_time in user_history if now - msg_time < RATE_LIMIT_PERIOD]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª—ñ–º—ñ—Ç
        if len(user_history) >= RATE_LIMIT_MESSAGES:
            return False
        
        # –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
        user_history.append(now)
        return True
    
    def validate_file(self, file_path: str) -> bool:
        """–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ —Ñ–∞–π–ª"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
            _, ext = os.path.splitext(file_path.lower())
            if ext not in ALLOWED_EXTENSIONS:
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä
            if os.path.getsize(file_path) > MAX_FILE_SIZE:
                return False
            
            return True
        except Exception:
            return False
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        existing_user = db.get_user(user_id)
        if existing_user:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
            welcome_message = f"""–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {existing_user['tiktok_nickname']}! 

üéØ TikTok Live Analytics Bot –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!

‚ú® –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç:
üî∏ –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TikTok Live
üî∏ –û—Ç—Ä–∏–º—É–π—Ç–µ –º–∏—Ç—Ç—î–≤–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∞ –∑–≤—ñ—Ç–∏
üî∏ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ /menu

üéä –ù–æ–≤–∏–Ω–∫–∏:
üìä –†–æ–∑—à–∏—Ä–µ–Ω—ñ –∑–≤—ñ—Ç–∏ –∞–¥–º—ñ–Ω–∞
üå¥ –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤  
üì• CSV –µ–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
üöÄ –î–æ—Å—Ç—É–ø 24/7

–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏? –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /menu! üöÄ"""
            
            keyboard = [[InlineKeyboardButton("üéØ –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
            persistent_keyboard = [
                [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")],
                [KeyboardButton("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"), KeyboardButton("üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å")],
                [KeyboardButton("üèÜ –¢–æ–ø –µ—Ñ—ñ—Ä–∏"), KeyboardButton("üåü –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è")],
                [KeyboardButton("üåç –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÖ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")],
                [KeyboardButton("üìã –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"), KeyboardButton("üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö")],
                [KeyboardButton("üì• –°–∫–∞—á–∞—Ç–∏ –º—ñ–π –∑–≤—ñ—Ç"), KeyboardButton("üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ")],
                [KeyboardButton("üå¥ –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å"), KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")],
                [KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
            ]
            
            # –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
            if self.is_admin(user_id):
                persistent_keyboard.append([KeyboardButton("üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")])
            
            persistent_reply_markup = ReplyKeyboardMarkup(persistent_keyboard, resize_keyboard=True)
            
            await update.message.reply_text(welcome_message, reply_markup=persistent_reply_markup)
            return
        
        # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        welcome_message = f"""–í—ñ—Ç–∞—î–º–æ –≤ TikTok Live Analytics Bot! 

üéØ –©–æ —Ü–µ –∑–∞ –±–æ—Ç?
–¶–µ –ø–æ—Ç—É–∂–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TikTok Live –µ—Ñ—ñ—Ä—ñ–≤!

üåü –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
üî∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üî∏ –î–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –ø–æ –¥–Ω—è—Ö, —Ç–∏–∂–Ω—è—Ö, –º—ñ—Å—è—Ü—è—Ö
üî∏ CSV –µ–∫—Å–ø–æ—Ä—Ç –¥–ª—è Excel —Ç–∞ Google Sheets
üî∏ –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
üî∏ –ë–∞–≥–∞—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ –¥–µ–Ω—å –∑ –∞–≤—Ç–æ—Å—É–º—É–≤–∞–Ω–Ω—è–º
üî∏ –î–æ—Å—Ç—É–ø 24/7

üöÄ –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:
1. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –≤–∫–∞–∑–∞–≤—à–∏ TikTok –Ω—ñ–∫–Ω–µ–π–º
2. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –ø—ñ—Å–ª—è –µ—Ñ—ñ—Ä—ñ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ)
3. –û—Ç—Ä–∏–º—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É —Ç–∞ –∑–≤—ñ—Ç–∏

üíé –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ:
‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –µ—Ñ—ñ—Ä—ñ–≤
‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–ª—è–¥–∞—á—ñ–≤  
‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤
‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª–º–∞–∑—ñ–≤

–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üëá"""
        
        keyboard = [[InlineKeyboardButton("üöÄ –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="start_registration")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def handle_start_registration(self, query):
        """–û–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑ –∫–Ω–æ–ø–∫–∏"""
        user_id = query.from_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        existing_user = db.get_user(user_id)
        if existing_user:
            await self.show_main_menu(query, user_id)
            return
        
        # –ü–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        user_states[user_id] = 'waiting_nickname'
        
        message = f"""–í—ñ—Ç–∞—î–º–æ –≤ TikTok Live Analytics Bot! 

{MESSAGES['nickname_prompt']}

üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –Ω—ñ–∫—É:
‚Ä¢ –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π TikTok –Ω—ñ–∫–Ω–µ–π–º –±–µ–∑ —Å–∏–º–≤–æ–ª—É @
‚Ä¢ –î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥ 1 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤
‚Ä¢ –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, –∫—Ä–∞–ø–∫–∏ —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è

üìù –ü—Ä–∏–∫–ª–∞–¥: username123

üéâ –ü—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏ –∑–º–æ–∂–µ—Ç–µ:
üî∏ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üî∏ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
üî∏ –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –≤ Excel
üî∏ –í—ñ–¥–º—ñ—á–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ"""
        
        await query.edit_message_text(message)
    
    async def myid_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /myid - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π Telegram ID"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or "–Ω–µ–º–∞—î username"
        is_admin = self.is_admin(user_id)
        
        message = f"üÜî –í–∞—à—ñ –¥–∞–Ω—ñ:\n"
        message += f"üë§ Username: @{username}\n"
        message += f"üî¢ Telegram ID: `{user_id}`\n"
        message += f"üîß –°—Ç–∞—Ç—É—Å –∞–¥–º—ñ–Ω–∞: {'‚úÖ –¢–∞–∫' if is_admin else '‚ùå –ù—ñ'}\n\n"
        message += f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω ID: {ADMIN_USER_IDS}\n\n"
        
        if is_admin:
            message += "üéâ –£ –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /admin"
        else:
            message += "‚ÑπÔ∏è –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥–º—ñ–Ω –ø—Ä–∞–≤ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º"
        
        await update.message.reply_text(message)
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /menu"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        user_data = db.get_user(user_id)
        
        if not user_data:
            await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
            return
        
        # –î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        persistent_keyboard = [
            [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")],
            [KeyboardButton("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"), KeyboardButton("üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å")],
            [KeyboardButton("üèÜ –¢–æ–ø –µ—Ñ—ñ—Ä–∏"), KeyboardButton("üåü –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è")],
            [KeyboardButton("üåç –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÖ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")],
            [KeyboardButton("üìã –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"), KeyboardButton("üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö")],
            [KeyboardButton("üì• –°–∫–∞—á–∞—Ç–∏ –º—ñ–π –∑–≤—ñ—Ç"), KeyboardButton("üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ")],
            [KeyboardButton("üå¥ –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å"), KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
        ]
        
        # –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
        if self.is_admin(user_id):
            persistent_keyboard.append([KeyboardButton("üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")])
        
        persistent_reply_markup = ReplyKeyboardMarkup(persistent_keyboard, resize_keyboard=True)
        
        welcome_text = f"""üéØ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é TikTok Live Analytics

üëã –ü—Ä–∏–≤—ñ—Ç, {user_data['tiktok_nickname']}!

–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"""
        
        await update.message.reply_text(welcome_text, reply_markup=persistent_reply_markup)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /admin"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or "–Ω–µ–º–∞—î username"
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} (ID: {user_id}) –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /admin")
        logger.info(f"üîß –ü–æ—Ç–æ—á–Ω—ñ –∞–¥–º—ñ–Ω ID: {ADMIN_USER_IDS}")
        logger.info(f"üîë –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ is_admin: {self.is_admin(user_id)}")
        
        if not self.is_admin(user_id):
            await update.message.reply_text(
                f"{MESSAGES['admin_only']}\n\n"
                f"üÜî –í–∞—à ID: `{user_id}`\n"
                f"üìã –ü–æ—Ç–æ—á–Ω—ñ –∞–¥–º—ñ–Ω ID: {ADMIN_USER_IDS}\n\n"
                f"‚ÑπÔ∏è –Ø–∫—â–æ –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º"
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö", callback_data="admin_all_stats"),
             InlineKeyboardButton("üìã –¢–∞–±–ª–∏—Ü—è –∑–≤—ñ—Ç—ñ–≤", callback_data="admin_table_report")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_users_list"),
             InlineKeyboardButton("üéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_user_activity")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥", callback_data="admin_period_stats"),
             InlineKeyboardButton("üîß –¢–µ—Å—Ç OCR", callback_data="admin_test_ocr")],
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç", callback_data="download_summary_report"),
             InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç–∏ –≤—Å—ñ –∑–≤—ñ—Ç–∏", callback_data="download_all_reports")],
            [InlineKeyboardButton("üë§ –ó–≤—ñ—Ç –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", callback_data="download_user_report"),
             InlineKeyboardButton("üìä –ó–≤—ñ—Ç –∑ –≤–∏—Ö—ñ–¥–Ω–∏–º–∏", callback_data="download_holiday_report")],
            [InlineKeyboardButton("üìÅ –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö", callback_data="admin_export_all"),
             InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ", callback_data="admin_cleanup")],
            [InlineKeyboardButton("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏", callback_data="admin_logs"),
             InlineKeyboardButton("üîë –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø—É", callback_data="admin_diagnostics")],
            [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="admin_system_info"),
             InlineKeyboardButton("üîß –¢–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="admin_maintenance")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å\n"
            f"üëã –ü—Ä–∏–≤—ñ—Ç, {username}!\n"
            f"üÜî –í–∞—à ID: {user_id}\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
            reply_markup=reply_markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        text = update.message.text
        
        if not text:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ rate limit
        if not self.check_rate_limit(user_id):
            await update.message.reply_text("‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω—É.")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id in user_states and user_states[user_id] == 'waiting_nickname':
            # –ó–±–µ—Ä–µ–≥—Ç–∏ TikTok –Ω—ñ–∫–Ω–µ–π–º
            nickname = text.strip().replace('@', '')
            if len(nickname) < 1 or len(nickname) > 50:
                await update.message.reply_text("‚ùå –ù—ñ–∫–Ω–µ–π–º –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤.")
                return
            
            # –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if db.register_user(user_id, nickname):
                user_states.pop(user_id, None)
                
                # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                success_message = f"""üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! 

üë§ –í—ñ—Ç–∞—î–º–æ, {nickname}! 
üÜî –í–∞—à ID: `{user_id}`

üéØ –©–æ –¥–∞–ª—ñ?
üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç TikTok Live —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/menu` –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –æ–ø—Ü—ñ–π

‚ú® –ì–æ—Ç–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üîπ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏
üîπ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö —É CSV
üîπ –°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥–º—ñ—Ç–∫–∏ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤
üîπ –î–æ—Å—Ç—É–ø 24/7

üöÄ –ü–æ—á–Ω—ñ—Ç—å –∑–∞—Ä–∞–∑: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –ø–µ—Ä—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç!"""
                
                await update.message.reply_text(success_message)
                
                logger.info(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: {user_id} - {nickname}")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω—ñ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
        elif text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            user_data = db.get_user(user_id)
            if user_data:
                summary = db.get_user_summary(user_id, 30)
                message = create_user_stats_message(user_data, summary)
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å":
            user_data = db.get_user(user_id)
            if user_data:
                summary = db.get_user_summary(user_id, 1)
                message = f"""üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({user_data['tiktok_nickname']})

üé• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ—Ñ—ñ—Ä—ñ–≤: {summary.get('sessions_count', 0)}
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(summary.get('total_duration', 0))}
üë• –í—Å—å–æ–≥–æ –≥–ª—è–¥–∞—á—ñ–≤: {format_number(summary.get('total_viewers', 0))}
üéÅ –í—Å—å–æ–≥–æ –¥–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤: {format_number(summary.get('total_gifters', 0))}
üíé –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(summary.get('total_diamonds', 0))}

üìä –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(summary.get('avg_duration', 0))}
üë• –°–µ—Ä–µ–¥–Ω—è –∫-—Ç—å –≥–ª—è–¥–∞—á—ñ–≤: {format_number(summary.get('avg_viewers', 0))}
üíé –°–µ—Ä–µ–¥–Ω—è –∫-—Ç—å –∞–ª–º–∞–∑—ñ–≤: {format_number(summary.get('avg_diamonds', 0))}"""
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö":
            user_data = db.get_user(user_id)
            if user_data:
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ CSV —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                stats = db.get_user_statistics(user_id, 365)  # –í—Å—ñ –¥–∞–Ω—ñ –∑–∞ —Ä—ñ–∫
                if stats:
                    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –µ–∫—Å–ø–æ—Ä—Ç
                    await update.message.reply_text("üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
                else:
                    await update.message.reply_text("üìÑ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å":
            user_data = db.get_user(user_id)
            if user_data:
                summary = db.get_user_summary(user_id, 7)
                message = f"""üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å ({user_data['tiktok_nickname']})

üé• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ—Ñ—ñ—Ä—ñ–≤: {summary.get('sessions_count', 0)}
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(summary.get('total_duration', 0))}
üë• –í—Å—å–æ–≥–æ –≥–ª—è–¥–∞—á—ñ–≤: {format_number(summary.get('total_viewers', 0))}
üéÅ –í—Å—å–æ–≥–æ –¥–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤: {format_number(summary.get('total_gifters', 0))}
üíé –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(summary.get('total_diamonds', 0))}

üìä –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(summary.get('avg_duration', 0))}
üë• –°–µ—Ä–µ–¥–Ω—è –∫-—Ç—å –≥–ª—è–¥–∞—á—ñ–≤: {format_number(summary.get('avg_viewers', 0))}
üíé –°–µ—Ä–µ–¥–Ω—è –∫-—Ç—å –∞–ª–º–∞–∑—ñ–≤: {format_number(summary.get('avg_diamonds', 0))}"""
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å":
            user_data = db.get_user(user_id)
            if user_data:
                summary = db.get_user_summary(user_id, 30)
                message = f"""üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å ({user_data['tiktok_nickname']})

üé• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ—Ñ—ñ—Ä—ñ–≤: {summary.get('sessions_count', 0)}
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(summary.get('total_duration', 0))}
üë• –í—Å—å–æ–≥–æ –≥–ª—è–¥–∞—á—ñ–≤: {format_number(summary.get('total_viewers', 0))}
üéÅ –í—Å—å–æ–≥–æ –¥–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤: {format_number(summary.get('total_gifters', 0))}
üíé –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(summary.get('total_diamonds', 0))}

üìä –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(summary.get('avg_duration', 0))}
üë• –°–µ—Ä–µ–¥–Ω—è –∫-—Ç—å –≥–ª—è–¥–∞—á—ñ–≤: {format_number(summary.get('avg_viewers', 0))}
üíé –°–µ—Ä–µ–¥–Ω—è –∫-—Ç—å –∞–ª–º–∞–∑—ñ–≤: {format_number(summary.get('avg_diamonds', 0))}"""
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üèÜ –¢–æ–ø –µ—Ñ—ñ—Ä–∏":
            user_data = db.get_user(user_id)
            if user_data:
                stats = db.get_user_statistics(user_id, 30)
                if not stats:
                    message = "üèÜ –¢–æ–ø –µ—Ñ—ñ—Ä–∏\n\n–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤."
                else:
                    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∞–ª–º–∞–∑–∞–º–∏
                    top_streams = sorted(stats, key=lambda x: x.get('diamonds_count', 0), reverse=True)[:5]
                    message = "üèÜ –¢–æ–ø 5 –µ—Ñ—ñ—Ä—ñ–≤ –∑–∞ –∞–ª–º–∞–∑–∞–º–∏:\n\n"
                    for i, stream in enumerate(top_streams, 1):
                        date = datetime.fromisoformat(stream['timestamp']).strftime('%d.%m %H:%M')
                        message += f"{i}. üìÖ {date}\n"
                        message += f"‚è±Ô∏è {format_duration(stream['duration_minutes'])}\n"
                        message += f"üë• {format_number(stream['viewers_count'])} –≥–ª—è–¥–∞—á—ñ–≤\n"
                        message += f"üíé {format_number(stream['diamonds_count'])} –∞–ª–º–∞–∑—ñ–≤\n\n"
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üåü –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è":
            user_data = db.get_user(user_id)
            if user_data:
                summary = db.get_user_summary(user_id, 999)
                achievements = []
                total_sessions = summary.get('sessions_count', 0)
                total_diamonds = summary.get('total_diamonds', 0)
                total_duration = summary.get('total_duration', 0)
                
                if total_sessions >= 1:
                    achievements.append("üéØ –ü–µ—Ä—à–∏–π –µ—Ñ—ñ—Ä")
                if total_sessions >= 10:
                    achievements.append("üî• 10 –µ—Ñ—ñ—Ä—ñ–≤")
                if total_diamonds >= 1000:
                    achievements.append("üíé 1K –∞–ª–º–∞–∑—ñ–≤")
                if total_duration >= 60:
                    achievements.append("‚è∞ –ì–æ–¥–∏–Ω–Ω–∏–π —Å—Ç—Ä—ñ–º–µ—Ä")
                
                message = f"""üåü –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

üèÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {len(achievements)}

"""
                if achievements:
                    message += "üéä –í–∞—à—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏:\n"
                    for achievement in achievements:
                        message += f"‚úÖ {achievement}\n"
                    message += "\nüåü –í—ñ—Ç–∞—î–º–æ –∑ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏!"
                else:
                    message += "–ü–æ–∫–∏ —â–æ –¥–æ—Å—è–≥–Ω–µ–Ω—å –Ω–µ–º–∞—î. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Å—Ç—Ä—ñ–º–∏—Ç–∏! üí™"
                
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üåç –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            total_stats = db.get_total_stats()
            message = f"""üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_stats.get('total_users', 0)}
üé• –í—Å—å–æ–≥–æ –µ—Ñ—ñ—Ä—ñ–≤: {total_stats.get('total_sessions', 0)}
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_stats.get('total_duration', 0))}
üëÄ –í—Å—å–æ–≥–æ –≥–ª—è–¥–∞—á—ñ–≤: {format_number(total_stats.get('total_viewers', 0))}
üíé –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(total_stats.get('total_diamonds', 0))}"""
            await update.message.reply_text(message)
        
        elif text == "üèÖ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
            users = db.get_all_users()
            sorted_users = sorted(users, key=lambda x: x.get('total_diamonds', 0) or 0, reverse=True)
            message = f"üèÖ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –∞–ª–º–∞–∑–∞–º–∏:\n\n"
            emoji_medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
            for i, user in enumerate(sorted_users[:10], 0):
                nickname = user.get('tiktok_nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
                diamonds = user.get('total_diamonds', 0) or 0
                sessions = user.get('total_sessions', 0) or 0
                medal = emoji_medals[i] if i < len(emoji_medals) else f"{i+1}."
                message += f"{medal} {nickname}\n"
                message += f"üíé {format_number(diamonds)} –∞–ª–º–∞–∑—ñ–≤\n"
                message += f"üé• {sessions} –µ—Ñ—ñ—Ä—ñ–≤\n\n"
            await update.message.reply_text(message)
        
        elif text == "üìã –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å":
            user_data = db.get_user(user_id)
            if user_data:
                recent_stats = db.get_user_statistics(user_id, 7)
                if not recent_stats:
                    message = "üìã –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤."
                else:
                    message = "üìã –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (7 –¥–Ω—ñ–≤):\n\n"
                    for stat in recent_stats[:5]:
                        date = datetime.fromisoformat(stat['timestamp']).strftime('%d.%m %H:%M')
                        message += f"üìÖ {date}\n"
                        message += f"‚è±Ô∏è {format_duration(stat['duration_minutes'])}\n"
                        message += f"üë• {format_number(stat['viewers_count'])} –≥–ª—è–¥–∞—á—ñ–≤\n"
                        message += f"üíé {format_number(stat['diamonds_count'])} –∞–ª–º–∞–∑—ñ–≤\n\n"
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üì• –°–∫–∞—á–∞—Ç–∏ –º—ñ–π –∑–≤—ñ—Ç":
            user_data = db.get_user(user_id)
            if user_data:
                await update.message.reply_text("üì• –§—É–Ω–∫—Ü—ñ—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é!")
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ":
            user_data = db.get_user(user_id)
            if user_data:
                holidays = db.get_user_holidays(user_id)
                if not holidays:
                    message = "üìÖ –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø–æ–∑–Ω–∞—á–µ–Ω–∏—Ö –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤."
                else:
                    message = f"üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ ({len(holidays)}):\n\n"
                    for holiday in holidays[:10]:
                        date_obj = datetime.strptime(holiday['holiday_date'], '%Y-%m-%d')
                        date_str = date_obj.strftime('%d.%m.%Y')
                        message += f"üå¥ {date_str}\n"
                    if len(holidays) > 10:
                        message += f"... —Ç–∞ —â–µ {len(holidays) - 10} –≤–∏—Ö—ñ–¥–Ω–∏—Ö"
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "üå¥ –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å":
            user_data = db.get_user(user_id)
            if user_data:
                today = datetime.now().strftime('%Y-%m-%d')
                if db.is_holiday(user_id, today):
                    message = f"üå¥ –°—å–æ–≥–æ–¥–Ω—ñ ({datetime.now().strftime('%d.%m.%Y')}) –≤–∂–µ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å!"
                else:
                    if db.add_holiday(user_id, today):
                        message = f"üå¥ –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å –¥–æ–¥–∞–Ω–æ! –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}"
                    else:
                        message = "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –¥–Ω—è."
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
            user_data = db.get_user(user_id)
            if user_data:
                reg_date = datetime.fromisoformat(user_data['registration_date']).strftime('%d.%m.%Y')
                message = f"""‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é

üë§ TikTok –Ω—ñ–∫–Ω–µ–π–º: {user_data['tiktok_nickname']}
üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {reg_date}
üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}"""
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start")
        
        elif text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
            message = """‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞ TikTok Live Analytics Bot

üéØ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:
1. üì∏ –ó—Ä–æ–±—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç TikTok Live —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
2. üì® –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –±–æ—Ç—É  
3. ‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ –Ω–∞ –∞–Ω–∞–ª—ñ–∑
4. üìä –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üîß –ö–æ–º–∞–Ω–¥–∏:
‚Ä¢ /start - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
‚Ä¢ /menu - –ú–µ–Ω—é
‚Ä¢ /help - –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞

üí° –ü–æ—Ä–∞–¥–∏:
‚Ä¢ –Ø–∫—ñ—Å–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
‚Ä¢ –ß–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10MB

üÜò –ü—Ä–æ–±–ª–µ–º–∏? –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"""
            await update.message.reply_text(message)
        
        elif text == "üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å":
            if self.is_admin(user_id):
                await update.message.reply_text("üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –≤—ñ–¥–∫—Ä–∏—Ç–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –ø–æ–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ")
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ")
        
        else:
            # –Ü–Ω—à—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await update.message.reply_text(MESSAGES['photo_only'])
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        user_data = db.get_user(user_id)
        if not user_data:
            keyboard = [[InlineKeyboardButton("üöÄ –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="start_registration")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤—ñ—Ç! –°—Ö–æ–∂–µ, –≤–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.\n\n"
                "üéØ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TikTok Live!\n"
                "üî∏ –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É\n\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏:",
                reply_markup=reply_markup
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
        if db.is_maintenance_mode():
            maintenance_info = db.get_maintenance_info()
            maintenance_message = maintenance_info.get('message', '')
            
            message = "üîß **–¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è**\n\n"
            message += "‚è≥ –ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤\n"
            message += "üõ†Ô∏è –ü—Ä–æ–≤–æ–¥—è—Ç—å—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É\n\n"
            
            if maintenance_message:
                message += f"üìã –ü—Ä–∏—á–∏–Ω–∞: {maintenance_message}\n\n"
            
            message += "üïê –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ\n"
            message += "üìû –î–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            
            await update.message.reply_text(message)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ (24/7)
        if not self.is_working_hours():
            current_time = datetime.now().strftime('%H:%M')
            await update.message.reply_text(
                f"üïê –ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n\n"
                f"‚è∞ –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {current_time}\n"
                f"‚è≥ –†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏: 00:00 - 23:59\n\n"
                f"üïê –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É!"
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª—ñ–º—ñ—Ç
        if not self.check_rate_limit(user_id):
            await update.message.reply_text("‚è∞ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É.")
            return
        
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
            processing_msg = await update.message.reply_text("‚è≥ –ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É –≤–∞—à–æ–≥–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞...")
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]  # –ù–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑–º—ñ—Ä
            file = await context.bot.get_file(photo.file_id)
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"screenshot_{user_id}_{timestamp}.jpg"
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª
            file_path = await file.download_to_drive(filename)
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—É
            if not self.validate_file(filename):
                await processing_msg.edit_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É. –ù–∞–¥—ñ—à–ª—ñ—Ç—å JPG –∞–±–æ PNG.")
                os.unlink(filename)
                return
            
            # –û–±—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é OCR
            await processing_msg.edit_text("‚öôÔ∏è –û–±—Ä–æ–±–ª—è—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è... üîç\nüìñ –†–æ–∑–ø—ñ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
            
            stats = ocr_processor.process_tiktok_screenshot(filename)
            
            if not stats:
                await processing_msg.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
                os.unlink(filename)
                return
            
            duration, viewers, gifters, diamonds = stats
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            await processing_msg.edit_text("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ! \nüíæ –ó–±–µ—Ä—ñ–≥–∞—é –¥–∞–Ω—ñ...")
            
            # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            success = db.add_statistics(user_id, duration, viewers, gifters, diamonds)
            
            if success:
                # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                today_stats = db.get_today_total_stats(user_id)
                total_screenshots = today_stats.get('sessions_count', 1) if today_stats else 1
                
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                success_message = f"""‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! 

üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç:
‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(duration)}
üë• –ì–ª—è–¥–∞—á—ñ: {format_number(viewers)}
üéÅ –î–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫–∏: {format_number(gifters)}
üíé –ê–ª–º–∞–∑–∏: {format_number(diamonds)}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:
üé• –°–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {total_screenshots}"""

                if today_stats and total_screenshots > 1:
                    success_message += f"""
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(today_stats.get('total_duration', 0))}
üë• –í—Å—å–æ–≥–æ –≥–ª—è–¥–∞—á—ñ–≤: {format_number(today_stats.get('total_viewers', 0))}
üíé –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(today_stats.get('total_diamonds', 0))}"""

                success_message += "\n\nüìä –î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞!"
                
                await processing_msg.edit_text(success_message)
                
                logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {user_id}, {duration}—Ö–≤, {viewers} –≥–ª—è–¥–∞—á—ñ–≤, {diamonds} –∞–ª–º–∞–∑—ñ–≤")
            else:
                await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª
            os.unlink(filename)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: {e}")
            try:
                await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            except:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª —è–∫—â–æ —ñ—Å–Ω—É—î
            if 'filename' in locals() and os.path.exists(filename):
                os.unlink(filename)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤"""
        query = update.callback_query
        if not query or not query.from_user:
            return
            
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            if data == "my_stats":
                await self.show_user_stats(query, user_id)
            elif data == "stats_today":
                await self.show_stats_period(query, user_id, 1, "—Å—å–æ–≥–æ–¥–Ω—ñ")
            elif data == "stats_week":
                await self.show_stats_period(query, user_id, 7, "–∑–∞ —Ç–∏–∂–¥–µ–Ω—å")
            elif data == "stats_month":
                await self.show_stats_period(query, user_id, 30, "–∑–∞ –º—ñ—Å—è—Ü—å")
            elif data == "my_top_streams":
                await self.show_top_streams(query, user_id)
            elif data == "my_achievements":
                await self.show_achievements(query, user_id)
            elif data == "general_stats":
                await self.show_general_stats(query)
            elif data == "top_users":
                await self.show_top_users(query)
            elif data == "recent_activity":
                await self.show_recent_activity(query, user_id)
            elif data == "export_data":
                await self.export_user_data(query, user_id)
            elif data == "settings":
                await self.show_settings(query, user_id)
            elif data == "help":
                await self.show_help(query)
            elif data == "change_nickname":
                await self.change_nickname(query, user_id)
            elif data == "back_to_menu":
                await self.show_main_menu(query, user_id)
            elif data == "show_commands_inline":
                await self.show_commands_inline(query, user_id)
            elif data == "add_holiday":
                await self.add_holiday(query, user_id)
            elif data == "my_holidays":
                await self.show_my_holidays(query, user_id)
            elif data and data.startswith("remove_holiday_"):
                date = data.replace("remove_holiday_", "")
                await self.remove_holiday(query, user_id, date)
            elif data == "download_my_report":
                await self.download_my_report(query, user_id)
            
            # –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó
            elif data == "admin_panel" and self.is_admin(user_id):
                await self.show_admin_panel(query)
            elif data == "admin_all_stats" and self.is_admin(user_id):
                await self.show_admin_stats(query)
            elif data == "admin_table_report" and self.is_admin(user_id):
                await self.show_admin_table_report(query)
            elif data == "admin_users_list" and self.is_admin(user_id):
                await self.show_users_list(query)
            elif data == "admin_period_stats" and self.is_admin(user_id):
                await self.show_admin_period_stats(query)
            elif data == "admin_user_activity" and self.is_admin(user_id):
                await self.show_admin_user_activity(query)
            elif data == "admin_test_ocr" and self.is_admin(user_id):
                await self.test_ocr(query)
            elif data == "admin_export_all" and self.is_admin(user_id):
                await self.admin_export_all(query)
            elif data == "admin_cleanup" and self.is_admin(user_id):
                await self.admin_cleanup(query)
            elif data == "admin_logs" and self.is_admin(user_id):
                await self.show_admin_logs(query)
            elif data == "admin_diagnostics" and self.is_admin(user_id):
                await self.admin_diagnostics(query)
            elif data == "admin_system_info" and self.is_admin(user_id):
                await self.admin_system_info(query)
            elif data == "admin_maintenance" and self.is_admin(user_id):
                await self.show_maintenance_menu(query)
            elif data == "maintenance_enable" and self.is_admin(user_id):
                await self.enable_maintenance_mode(query)
            elif data == "maintenance_disable" and self.is_admin(user_id):
                await self.disable_maintenance_mode(query)
            elif data == "maintenance_status" and self.is_admin(user_id):
                await self.show_maintenance_status(query)
            elif data == "admin_detailed_reports" and self.is_admin(user_id):
                await self.show_admin_detailed_reports(query)
            elif data and data.startswith("detailed_period_"):
                period = data.replace("detailed_period_", "")
                await self.show_detailed_period_menu(query, period)
            elif data and data.startswith("detailed_user_"):
                parts = data.replace("detailed_user_", "").split("_")
                if len(parts) >= 2:
                    period = parts[0]
                    target_user_id = int(parts[1])
                    await self.show_detailed_user_stats(query, target_user_id, period)
            elif data == "download_summary_report" and self.is_admin(user_id):
                await self.download_summary_report(query, user_id)
            elif data == "download_all_reports" and self.is_admin(user_id):
                await self.download_all_reports(query, user_id)
            elif data == "download_user_report" and self.is_admin(user_id):
                await self.download_user_report(query, user_id)
            elif data == "download_holiday_report" and self.is_admin(user_id):
                await self.download_holiday_report(query, user_id)
            elif data and data.startswith("user_report_"):
                target_user_id = int(data.replace("user_report_", ""))
                await self.generate_individual_user_report(query, target_user_id)
            elif data and data.startswith("download_detailed_") and self.is_admin(user_id):
                parts = data.replace("download_detailed_", "").split("_")
                if len(parts) >= 2:
                    period = parts[0]
                    target_user_id = int(parts[1])
                    await self.download_detailed_user_report(query, target_user_id, period)
            elif data == "start_registration":
                await self.handle_start_registration(query)
            else:
                await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ callback: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.")
    
    async def show_user_stats(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        user_data = db.get_user(user_id)
        if not user_data:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
            return
        
        summary = db.get_user_summary(user_id, 30)
        message = create_user_stats_message(user_data, summary)
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def show_general_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_stats = db.get_total_stats()
        
        message = f"""üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_stats.get('total_users', 0)}
üé• –í—Å—å–æ–≥–æ –µ—Ñ—ñ—Ä—ñ–≤: {total_stats.get('total_sessions', 0)}
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_stats.get('total_duration', 0))}
üëÄ –í—Å—å–æ–≥–æ –≥–ª—è–¥–∞—á—ñ–≤: {format_number(total_stats.get('total_viewers', 0))}
üíé –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(total_stats.get('total_diamonds', 0))}
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def show_recent_activity(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        recent_stats = db.get_user_statistics(user_id, 7)
        
        if not recent_stats:
            message = "üìã –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤."
        else:
            message = "üìã –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (7 –¥–Ω—ñ–≤):\n\n"
            
            for stat in recent_stats[:5]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤
                date = datetime.fromisoformat(stat['timestamp']).strftime('%d.%m %H:%M')
                message += f"üìÖ {date}\n"
                message += f"‚è±Ô∏è {format_duration(stat['duration_minutes'])}\n"
                message += f"üë• {format_number(stat['viewers_count'])} –≥–ª—è–¥–∞—á—ñ–≤\n"
                message += f"üíé {format_number(stat['diamonds_count'])} –∞–ª–º–∞–∑—ñ–≤\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def change_nickname(self, query, user_id: int):
        """–ó–º—ñ–Ω–∏—Ç–∏ TikTok –Ω—ñ–∫–Ω–µ–π–º"""
        user_states[user_id] = 'waiting_nickname'
        
        message = f"""‚úèÔ∏è –ó–º—ñ–Ω–∞ TikTok –Ω—ñ–∫—É

{MESSAGES['nickname_prompt']}

üí° **–ü–æ—Ä–∞–¥–∏:**
‚Ä¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º –±–µ–∑ —Å–∏–º–≤–æ–ª—É @
‚Ä¢ –î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥ 1 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏

üîô –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def show_admin_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
        users = db.get_all_users()
        total_stats = db.get_total_stats()
        
        message = f"""üîß –ê–¥–º—ñ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}
üé• –í—Å—å–æ–≥–æ –µ—Ñ—ñ—Ä—ñ–≤: {total_stats.get('total_sessions', 0)}
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_stats.get('total_duration', 0))}
üíé –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(total_stats.get('total_diamonds', 0))}

üìä –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:
"""
        
        # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∞–ª–º–∞–∑—ñ–≤
        sorted_users = sorted(users, key=lambda x: x.get('total_diamonds', 0) or 0, reverse=True)
        
        for i, user in enumerate(sorted_users[:5], 1):
            nickname = user.get('tiktok_nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
            diamonds = user.get('total_diamonds', 0) or 0
            sessions = user.get('total_sessions', 0) or 0
            message += f"{i}. {nickname} - {format_number(diamonds)} üíé ({sessions} –µ—Ñ—ñ—Ä—ñ–≤)\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def show_admin_table_report(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—á–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
        report_data = db.get_admin_table_report(30)
        
        message = create_table_report(report_data, "–¢–∞–±–ª–∏—á–Ω–∏–π –∑–≤—ñ—Ç (–æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤)")
        
        message += "```"
        
        keyboard = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_table_report")],
                   [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def show_users_list(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        users = db.get_all_users()
        
        message = f"üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ({len(users)}):\n\n"
        
        for user in users[:20]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏—Ö 20
            nickname = user.get('tiktok_nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
            reg_date = datetime.fromisoformat(user['registration_date']).strftime('%d.%m.%Y')
            last_activity = datetime.fromisoformat(user['last_activity']).strftime('%d.%m.%Y')
            sessions = user.get('total_sessions', 0) or 0
            
            message += f"{nickname}\n"
            message += f"üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {reg_date}\n"
            message += f"üïê –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {last_activity}\n"
            message += f"üé• –ï—Ñ—ñ—Ä—ñ–≤: {sessions}\n\n"
        
        if len(users) > 20:
            message += f"... —Ç–∞ —â–µ {len(users) - 20} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def test_ocr(self, query):
        """–¢–µ—Å—Ç OCR"""
        if ocr_processor.test_ocr_installation():
            message = "‚úÖ OCR –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            message = "‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ OCR. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Tesseract."
            
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def show_main_menu(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        user_data = db.get_user(user_id)
        if not user_data:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
            return
        
        welcome_text = f"""üéØ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é TikTok Live Analytics

üëã –ü—Ä–∏–≤—ñ—Ç, {user_data['tiktok_nickname']}!

üéØ –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:

‚ú® –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
üìä –î–µ—Ç–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ 
üå¥ –í—ñ–¥–º—ñ—Ç–∫–∞ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤  
üì• –ï–∫—Å–ø–æ—Ä—Ç —É CSV
üöÄ –î–æ—Å—Ç—É–ø 24/7

üïê –†–æ–±–æ—á–∏–π —Ä–µ–∂–∏–º: –¶—ñ–ª–æ–¥–æ–±–æ–≤–æ"""
        
        await query.edit_message_text(welcome_text)
        
        # –î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        persistent_keyboard = [
            [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")],
            [KeyboardButton("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"), KeyboardButton("üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å")],
            [KeyboardButton("üèÜ –¢–æ–ø –µ—Ñ—ñ—Ä–∏"), KeyboardButton("üåü –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è")],
            [KeyboardButton("üåç –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üèÖ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")],
            [KeyboardButton("üìã –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"), KeyboardButton("üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö")],
            [KeyboardButton("üì• –°–∫–∞—á–∞—Ç–∏ –º—ñ–π –∑–≤—ñ—Ç"), KeyboardButton("üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ")],
            [KeyboardButton("üå¥ –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å"), KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
        ]
        
        # –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
        if self.is_admin(user_id):
            persistent_keyboard.append([KeyboardButton("üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")])
        
        persistent_reply_markup = ReplyKeyboardMarkup(persistent_keyboard, resize_keyboard=True)
        
        await query.message.reply_text("üîΩ –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø:", reply_markup=persistent_reply_markup)

    async def show_stats_period(self, query, user_id: int, days: int, period_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä—ñ–æ–¥"""
        user_data = db.get_user(user_id)
        if not user_data:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
            return
        
        summary = db.get_user_summary(user_id, days)
        
        message = f"""üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name} ({user_data['tiktok_nickname']})

üé• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ—Ñ—ñ—Ä—ñ–≤: {summary.get('sessions_count', 0)}
‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(summary.get('total_duration', 0))}
üë• –í—Å—å–æ–≥–æ –≥–ª—è–¥–∞—á—ñ–≤: {format_number(summary.get('total_viewers', 0))}
üéÅ –í—Å—å–æ–≥–æ –¥–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤: {format_number(summary.get('total_gifters', 0))}
üíé –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(summary.get('total_diamonds', 0))}

üìä –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(summary.get('avg_duration', 0))}
üë• –°–µ—Ä–µ–¥–Ω—è –∫-—Ç—å –≥–ª—è–¥–∞—á—ñ–≤: {format_number(summary.get('avg_viewers', 0))}
üíé –°–µ—Ä–µ–¥–Ω—è –∫-—Ç—å –∞–ª–º–∞–∑—ñ–≤: {format_number(summary.get('avg_diamonds', 0))}
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_top_streams(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –µ—Ñ—ñ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø 5 –µ—Ñ—ñ—Ä—ñ–≤ –∑–∞ –∞–ª–º–∞–∑–∞–º–∏
        stats = db.get_user_statistics(user_id, 30)
        
        if not stats:
            message = "üèÜ –¢–æ–ø –µ—Ñ—ñ—Ä–∏\n\n–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤."
        else:
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∞–ª–º–∞–∑–∞–º–∏
            top_streams = sorted(stats, key=lambda x: x.get('diamonds_count', 0), reverse=True)[:5]
            
            message = "üèÜ –¢–æ–ø 5 –µ—Ñ—ñ—Ä—ñ–≤ –∑–∞ –∞–ª–º–∞–∑–∞–º–∏:\n\n"
            
            for i, stream in enumerate(top_streams, 1):
                date = datetime.fromisoformat(stream['timestamp']).strftime('%d.%m %H:%M')
                message += f"{i}. üìÖ {date}\n"
                message += f"‚è±Ô∏è {format_duration(stream['duration_minutes'])}\n"
                message += f"üë• {format_number(stream['viewers_count'])} –≥–ª—è–¥–∞—á—ñ–≤\n"
                message += f"üíé {format_number(stream['diamonds_count'])} –∞–ª–º–∞–∑—ñ–≤\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_achievements(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        summary = db.get_user_summary(user_id, 999)  # –í—Å—ñ –¥–∞–Ω—ñ
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        achievements = []
        total_sessions = summary.get('sessions_count', 0)
        total_diamonds = summary.get('total_diamonds', 0)
        total_duration = summary.get('total_duration', 0)
        max_viewers = summary.get('max_viewers', 0)
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ —Å–µ—Å—ñ—ó
        if total_sessions >= 1:
            achievements.append("üéØ –ü–µ—Ä—à–∏–π –µ—Ñ—ñ—Ä")
        if total_sessions >= 10:
            achievements.append("üî• 10 –µ—Ñ—ñ—Ä—ñ–≤")
        if total_sessions >= 50:
            achievements.append("‚≠ê 50 –µ—Ñ—ñ—Ä—ñ–≤")
        if total_sessions >= 100:
            achievements.append("üëë 100 –µ—Ñ—ñ—Ä—ñ–≤")
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –∞–ª–º–∞–∑–∏
        if total_diamonds >= 1000:
            achievements.append("üíé 1K –∞–ª–º–∞–∑—ñ–≤")
        if total_diamonds >= 10000:
            achievements.append("üí† 10K –∞–ª–º–∞–∑—ñ–≤")
        if total_diamonds >= 100000:
            achievements.append("üíç 100K –∞–ª–º–∞–∑—ñ–≤")
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
        if total_duration >= 60:
            achievements.append("‚è∞ –ì–æ–¥–∏–Ω–Ω–∏–π —Å—Ç—Ä—ñ–º–µ—Ä")
        if total_duration >= 600:
            achievements.append("üïô 10 –≥–æ–¥–∏–Ω —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É")
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –≥–ª—è–¥–∞—á—ñ–≤
        if max_viewers >= 100:
            achievements.append("üë• 100 –≥–ª—è–¥–∞—á—ñ–≤")
        if max_viewers >= 1000:
            achievements.append("üåü 1K –≥–ª—è–¥–∞—á—ñ–≤")
        
        message = f"""üåü –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

üèÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {len(achievements)}

"""
        
        if achievements:
            message = f"""üåü –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

üèÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {len(achievements)}

üéä –í–∞—à—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏:
"""
            for achievement in achievements:
                message += f"‚úÖ {achievement}\n"
            
            message += "\nüåü –í—ñ—Ç–∞—î–º–æ –∑ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏!"
        else:
            message = f"""üåü –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

üèÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {len(achievements)}

–ü–æ–∫–∏ —â–æ –¥–æ—Å—è–≥–Ω–µ–Ω—å –Ω–µ–º–∞—î. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Å—Ç—Ä—ñ–º–∏—Ç–∏! üí™

üéØ –ù–∞–π–±–ª–∏–∂—á—ñ —Ü—ñ–ª—ñ:
üî∏ –ó—Ä–æ–±—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ—Ñ—ñ—Ä
üî∏ –î–æ—Å—è–≥–Ω—ñ—Ç—å 1K –∞–ª–º–∞–∑—ñ–≤  
üî∏ –ü—Ä–æ–≤–µ–¥—ñ—Ç—å –≥–æ–¥–∏–Ω—É —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É

üöÄ –£—Å–ø—ñ—Ö—ñ–≤ —É –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ —Ü—ñ–ª–µ–π!"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_top_users(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        users = db.get_all_users()
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–∞–≥–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∞–ª–º–∞–∑—ñ–≤
        sorted_users = sorted(users, key=lambda x: x.get('total_diamonds', 0) or 0, reverse=True)
        
        message = f"üèÖ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –∞–ª–º–∞–∑–∞–º–∏:\n\n"
        
        emoji_medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
        
        for i, user in enumerate(sorted_users[:10], 0):
            nickname = user.get('tiktok_nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
            diamonds = user.get('total_diamonds', 0) or 0
            sessions = user.get('total_sessions', 0) or 0
            
            medal = emoji_medals[i] if i < len(emoji_medals) else f"{i+1}."
            
            message += f"{medal} {nickname}\n"
            message += f"üíé {format_number(diamonds)} –∞–ª–º–∞–∑—ñ–≤\n"
            message += f"üé• {sessions} –µ—Ñ—ñ—Ä—ñ–≤\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def export_user_data(self, query, user_id: int):
        """–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        user_data = db.get_user(user_id)
        if not user_data:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
            return
        
        stats = db.get_user_statistics(user_id, 365)  # –ó–∞ —Ä—ñ–∫
        
        if not stats:
            message = """üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö

üìÑ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.

üéØ –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:
üî∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫—ñ–ª—å–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üî∏ –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö
üî∏ –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É

üöÄ –ü–æ—á–Ω—ñ—Ç—å –∑–±–∏—Ä–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞—Ä–∞–∑! üì∏"""
        else:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ CSV-–ø–æ–¥—ñ–±–Ω–∏–π –≤–∏–≤—ñ–¥
            export_text = f"–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –¥–ª—è {user_data['tiktok_nickname']}\n"
            export_text += f"–î–∞—Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            export_text += "–î–∞—Ç–∞ | –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å | –ì–ª—è–¥–∞—á—ñ | –î–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫–∏ | –ê–ª–º–∞–∑–∏\n"
            export_text += "-" * 50 + "\n"
            
            for stat in stats[-20:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 20 –∑–∞–ø–∏—Å—ñ–≤
                date = datetime.fromisoformat(stat['timestamp']).strftime('%d.%m.%Y')
                duration = format_duration(stat['duration_minutes'])
                viewers = format_number(stat['viewers_count'])
                gifters = format_number(stat['gifters_count'])
                diamonds = format_number(stat['diamonds_count'])
                
                export_text += f"{date} | {duration} | {viewers} | {gifters} | {diamonds}\n"
            
            message = f"""üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö

üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö (–æ—Å—Ç–∞–Ω–Ω—ñ 20 –∑–∞–ø–∏—Å—ñ–≤):

{export_text}

üìä –î–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_settings(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        user_data = db.get_user(user_id)
        if not user_data:
            await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
            return
        
        reg_date = datetime.fromisoformat(user_data['registration_date']).strftime('%d.%m.%Y')
        
        message = f"""‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é

üë§ TikTok –Ω—ñ–∫–Ω–µ–π–º: {user_data['tiktok_nickname']}
üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {reg_date}
üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}
"""
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º", callback_data="change_nickname")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É –¥–æ–ø–æ–º–æ–≥—É"""
        message = """‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ TikTok Live Analytics Bot

üéØ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:

–ö—Ä–æ–∫ 1: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É
üì± –ó—Ä–æ–±—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TikTok Live –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ñ—ñ—Ä—É
üì∏ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –¥–∞–Ω—ñ:
   ‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –µ—Ñ—ñ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "3 –≥–æ–¥ 25 —Ö–≤")
   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–ª—è–¥–∞—á—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "4.9K Views")
   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∞—Ä—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "61 Gifters")
   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª–º–∞–∑—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "18.9K Diamonds")

–ö—Ä–æ–∫ 2: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –±–æ—Ç—É
üì® –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –≤ —á–∞—Ç –∑ –±–æ—Ç–æ–º
üïê –ü–∞–º'—è—Ç–∞–π—Ç–µ: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑ 7:00 –¥–æ 19:00
‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—Ä–æ–±–∫—É
‚úÖ –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É

–ö—Ä–æ–∫ 3: –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/menu` –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
üìà –î–∏–≤—ñ—Ç—å—Å—è —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—é–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏

üîß –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
‚Ä¢ `/start` - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
‚Ä¢ `/menu` - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
‚Ä¢ `/commands` - –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ `/myid` - –í–∞—à Telegram ID

üìä –¢–∏–ø–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ
‚Ä¢ –ó–∞ –ø–µ—Ä—ñ–æ–¥ - –¥–µ–Ω—å/—Ç–∏–∂–¥–µ–Ω—å/–º—ñ—Å—è—Ü—å
‚Ä¢ –¢–æ–ø –µ—Ñ—ñ—Ä–∏ - –Ω–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
‚Ä¢ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è - –æ—Ç—Ä–∏–º–∞–Ω—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¥–∞–Ω—ñ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

üåç –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏ OCR:
‚Ä¢ üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ("3 –≥–æ–¥ 25 —Ö–≤", "–ì–ª—è–¥–∞—á—ñ", "–î—ñ–∞–º–∞–Ω—Ç–∏")
‚Ä¢ üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ ("3 hours 40 min", "Views", "Diamonds")

üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —è–∫—ñ—Å–Ω—ñ, —á—ñ—Ç–∫—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
‚Ä¢ –£–Ω–∏–∫–∞–π—Ç–µ –∑–∞—Å–≤—ñ—á–µ–Ω–∏—Ö –∞–±–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ç–µ–∫—Å—Ç –¥–æ–±—Ä–µ —á–∏—Ç–∞—î—Ç—å—Å—è
‚Ä¢ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 10MB

üïê –í–∞–∂–ª–∏–≤–æ –ø—Ä–æ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏:
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑ 07:00 –¥–æ 19:00
‚Ä¢ –ü–æ–∑–∞ —Ü–∏–º —á–∞—Å–æ–º —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è
‚Ä¢ –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î —Å—Ç–∞–±—ñ–ª—å–Ω—É —Ä–æ–±–æ—Ç—É —Å–∏—Å—Ç–µ–º–∏

‚ö†Ô∏è –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞ —Ä—ñ—à–µ–Ω–Ω—è:
‚Ä¢ "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏" ‚Üí –ó—Ä–æ–±—ñ—Ç—å –∫—Ä–∞—â–∏–π —Å–∫—Ä—ñ–Ω—à–æ—Ç
‚Ä¢ "–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π" ‚Üí –°—Ç–∏—Å–Ω—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
‚Ä¢ "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è" ‚Üí –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/start`

üîí –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å:
‚Ä¢ –í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –±–µ–∑–ø–µ—á–Ω–æ
‚Ä¢ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–æ –≤–∞—à–æ—ó –æ—Å–æ–±–∏—Å—Ç–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üÜò –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞?
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/commands` –¥–ª—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥"""
        
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="show_commands_inline")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def add_holiday(self, query, user_id: int):
        """–î–æ–¥–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏—Ö—ñ–¥–Ω–∏–π
        if db.is_holiday(user_id, today):
            message = f"""üå¥ –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å

üìÖ –°—å–æ–≥–æ–¥–Ω—ñ ({datetime.now().strftime('%d.%m.%Y')}) –≤–∂–µ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å.

‚úÖ –°—Ç–∞—Ç—É—Å: –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–∏–π
üèñÔ∏è –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ –≤—ñ–¥ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É!"""
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π", callback_data=f"remove_holiday_{today}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        else:
            # –î–æ–¥–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å
            if db.add_holiday(user_id, today):
                message = f"""üå¥ –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å –¥–æ–¥–∞–Ω–æ!

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}
‚úÖ –°—å–æ–≥–æ–¥–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å

üèñÔ∏è –í—ñ–¥–ø–æ—á–∏–≤–∞–π—Ç–µ –≤—ñ–¥ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É!
üí° –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –≤–∞—à–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."""
                
                keyboard = [
                    [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π", callback_data=f"remove_holiday_{today}")],
                    [InlineKeyboardButton("üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ", callback_data="my_holidays")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            else:
                message = "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –¥–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_my_holidays(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        holidays = db.get_user_holidays(user_id)
        
        if not holidays:
            message = """üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ

üèñÔ∏è –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø–æ–∑–Ω–∞—á–µ–Ω–∏—Ö –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤.

üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üå¥ –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å" –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –¥–Ω—ñ–≤, –∫–æ–ª–∏ –≤–∏ –Ω–µ —Å—Ç—Ä—ñ–º–∏—Ç–µ."""
            
            keyboard = [
                [InlineKeyboardButton("üå¥ –î–æ–¥–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="add_holiday")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        else:
            message = f"üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ ({len(holidays)}):\n\n"
            
            for holiday in holidays[:10]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10
                date_obj = datetime.strptime(holiday['holiday_date'], '%Y-%m-%d')
                date_str = date_obj.strftime('%d.%m.%Y')
                created_obj = datetime.fromisoformat(holiday['created_at'])
                created_str = created_obj.strftime('%d.%m %H:%M')
                
                message += f"üå¥ {date_str} (–¥–æ–¥–∞–Ω–æ {created_str})\n"
            
            if len(holidays) > 10:
                message += f"\n... —Ç–∞ —â–µ {len(holidays) - 10} –≤–∏—Ö—ñ–¥–Ω–∏—Ö"
            
            keyboard = [
                [InlineKeyboardButton("üå¥ –î–æ–¥–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="add_holiday")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def remove_holiday(self, query, user_id: int, date_str: str):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å"""
        if db.remove_holiday(user_id, date_str):
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            formatted_date = date_obj.strftime('%d.%m.%Y')
            
            message = f"""‚ùå –í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å —Å–∫–∞—Å–æ–≤–∞–Ω–æ

üìÖ –î–∞—Ç–∞: {formatted_date}
‚úÖ –î–µ–Ω—å –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω–∏–π —è–∫ –≤–∏—Ö—ñ–¥–Ω–∏–π

üí° –¢–µ–ø–µ—Ä —Ü–µ–π –¥–µ–Ω—å –±—É–¥–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."""
        else:
            message = "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –¥–Ω—è."
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ú–æ—ó –≤–∏—Ö—ñ–¥–Ω—ñ", callback_data="my_holidays")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_commands_inline(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ —ñ–Ω–ª–∞–π–Ω –º–µ–Ω—é"""
        is_admin = self.is_admin(user_id)
        
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        commands_message = """ü§ñ TikTok Live Analytics Bot - –ö–æ–º–∞–Ω–¥–∏

üìã –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
‚Ä¢ `/start` - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ `/menu` - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏  
‚Ä¢ `/myid` - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à Telegram ID —Ç–∞ —Å—Ç–∞—Ç—É—Å
‚Ä¢ `/commands` - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ `/help` - –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é

üìä –§—É–Ω–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ –º–µ–Ω—é:
‚Ä¢ üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏
‚Ä¢ üèÜ –¢–æ–ø –µ—Ñ—ñ—Ä–∏ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
‚Ä¢ üåç –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
‚Ä¢ üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
‚Ä¢ ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é

üì∏ –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:
1. –ó—Ä–æ–±—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TikTok Live
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –±–æ—Ç—É
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
4. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ `/menu`"""

        # –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω
        if is_admin:
            commands_message += """

üîß –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏:
‚Ä¢ `/admin` - –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º —Å–∏—Å—Ç–µ–º–æ—é

üéØ –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó:
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
‚Ä¢ üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥–∏
‚Ä¢ üîß –°–∏—Å—Ç–µ–º–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ üìÅ –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
‚Ä¢ üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
‚Ä¢ üìã –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤ —Å–∏—Å—Ç–µ–º–∏"""

        commands_message += """

üí° –ü—ñ–¥–∫–∞–∑–∫–∏:
‚Ä¢ –î–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —è–∫—ñ—Å–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
‚Ä¢ –í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –±–µ–∑–ø–µ—á–Ω–æ —Ç–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ
‚Ä¢ –ë–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤–∏ OCR

üÜò –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞? –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/help` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"""

        keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–≤–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞", callback_data="help")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(commands_message, reply_markup=reply_markup)

    async def show_admin_panel(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö", callback_data="admin_all_stats"),
             InlineKeyboardButton("üìã –¢–∞–±–ª–∏—Ü—è –∑–≤—ñ—Ç—ñ–≤", callback_data="admin_table_report")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_users_list"),
             InlineKeyboardButton("üéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_user_activity")],
            [InlineKeyboardButton("üìä –†–æ–∑—à–∏—Ä–µ–Ω—ñ –∑–≤—ñ—Ç–∏", callback_data="admin_detailed_reports"),
             InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥", callback_data="admin_period_stats")],
            [InlineKeyboardButton("üîß –¢–µ—Å—Ç OCR", callback_data="admin_test_ocr"),
             InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç", callback_data="download_summary_report")],
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç–∏ –≤—Å—ñ –∑–≤—ñ—Ç–∏", callback_data="download_all_reports"),
             InlineKeyboardButton("üë§ –ó–≤—ñ—Ç –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", callback_data="download_user_report")],
            [InlineKeyboardButton("üìä –ó–≤—ñ—Ç –∑ –≤–∏—Ö—ñ–¥–Ω–∏–º–∏", callback_data="download_holiday_report"),
             InlineKeyboardButton("üìÅ –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö", callback_data="admin_export_all")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ", callback_data="admin_cleanup"),
             InlineKeyboardButton("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏", callback_data="admin_logs")],
            [InlineKeyboardButton("üîë –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø—É", callback_data="admin_diagnostics"),
             InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="admin_system_info")],
            [InlineKeyboardButton("üîß –¢–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="admin_maintenance")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

    async def show_admin_period_stats(self, query):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
        total_stats_7d = db.get_total_stats_period(7)
        total_stats_30d = db.get_total_stats_period(30)
        
        message = f"""üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥

üìÖ –ó–∞ 7 –¥–Ω—ñ–≤:
üé• –ï—Ñ—ñ—Ä—ñ–≤: {total_stats_7d.get('total_sessions', 0)}
‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_stats_7d.get('total_duration', 0))}
üíé –ê–ª–º–∞–∑—ñ–≤: {format_number(total_stats_7d.get('total_diamonds', 0))}

üìÜ –ó–∞ 30 –¥–Ω—ñ–≤:
üé• –ï—Ñ—ñ—Ä—ñ–≤: {total_stats_30d.get('total_sessions', 0)}
‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_stats_30d.get('total_duration', 0))}
üíé –ê–ª–º–∞–∑—ñ–≤: {format_number(total_stats_30d.get('total_diamonds', 0))}
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_admin_user_activity(self, query):
        """–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        users = db.get_all_users()
        now = datetime.now()
        
        # –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
        active_today = 0
        active_week = 0
        active_month = 0
        
        for user in users:
            last_activity = datetime.fromisoformat(user['last_activity'])
            days_ago = (now - last_activity).days
            
            if days_ago == 0:
                active_today += 1
            if days_ago <= 7:
                active_week += 1
            if days_ago <= 30:
                active_month += 1
        
        message = f"""üéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}

üìÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:
üî• –°—å–æ–≥–æ–¥–Ω—ñ: {active_today}
üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å: {active_week}
üìÜ –ó–∞ –º—ñ—Å—è—Ü—å: {active_month}
üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ (>30–¥): {len(users) - active_month}
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def admin_export_all(self, query):
        """–ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö"""
        message = """üìÅ –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö

‚ö†Ô∏è –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É—î –≤—Å—ñ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —á–∞—Å –¥–ª—è –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤.

üîÑ –ï–∫—Å–ø–æ—Ä—Ç —Ä–æ–∑–ø–æ—á–∞—Ç–æ... (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω)
"""
        
        await query.edit_message_text(message)
        
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç —É —Ñ–∞–π–ª
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        total_stats = db.get_total_stats()
        users = db.get_all_users()
        
        export_message = f"""‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ

üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}
üé• –ï—Ñ—ñ—Ä—ñ–≤: {total_stats.get('total_sessions', 0)}
‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_stats.get('total_duration', 0))}
üíé –ê–ª–º–∞–∑—ñ–≤: {format_number(total_stats.get('total_diamonds', 0))}

üìÑ –î–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–ª—è –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(export_message, reply_markup=reply_markup)

    async def admin_cleanup(self, query):
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ"""
        message = """üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö

‚ö†Ô∏è –£–í–ê–ì–ê! –¶—è –¥—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å:
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ä—à—É –∑–∞ 365 –¥–Ω—ñ–≤
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (>180 –¥–Ω—ñ–≤)

‚ö†Ô∏è –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!

–û—á–∏—Å—Ç–∫–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞...
"""
        
        await query.edit_message_text(message)
        
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –æ—á–∏—Å—Ç–∫—É
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —â–æ –∑—Ä–æ–±–∏–ª–∏ –±
        
        cleanup_message = """‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:
üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: 0
üë• –í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: 0

–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞.
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(cleanup_message, reply_markup=reply_markup)

    async def show_admin_logs(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏"""
        message = """üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏

üîç –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó:
‚Ä¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: OK
‚Ä¢ OCR —Ç–µ—Å—Ç: ‚úÖ –ü—Ä–æ–π—à–æ–≤
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–∞
‚Ä¢ Telegram API: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫:
‚Ä¢ OCR –ø–æ–º–∏–ª–∫–∏: 0
‚Ä¢ –ü–æ–º–∏–ª–∫–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: 0
‚Ä¢ Telegram –ø–æ–º–∏–ª–∫–∏: 0

üïê –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def admin_diagnostics(self, query):
        """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø—É"""
        user_id = query.from_user.id
        username = query.from_user.username or "–Ω–µ–º–∞—î username"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        config_admin_ids = ADMIN_USER_IDS
        is_admin_check = self.is_admin(user_id)
        
        message = f"""üîë –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø—É

üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
‚Ä¢ Username: @{username}
‚Ä¢ User ID: {user_id}
‚Ä¢ Telegram ID: {user_id}

üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω –ø—Ä–∞–≤:
‚Ä¢ –í–∞—à ID: {user_id}
‚Ä¢ –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω ID: {config_admin_ids}
‚Ä¢ ID –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —É —Å–ø–∏—Å–∫—É: {'‚úÖ –¢–∞–∫' if user_id in config_admin_ids else '‚ùå –ù—ñ'}
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç is_admin(): {'‚úÖ –¢–∞–∫' if is_admin_check else '‚ùå –ù—ñ'}

üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ config.py:
‚Ä¢ ADMIN_USER_IDS: {config_admin_ids}
‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–¥–º—ñ–Ω—ñ–≤: {len(config_admin_ids)}

üîç –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
‚Ä¢ –¢–∏–ø user_id: {type(user_id).__name__}
‚Ä¢ –¢–∏–ø –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Å–ø–∏—Å–∫—É: {type(config_admin_ids[0]).__name__ if config_admin_ids else '—Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π'}

üïê –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_diagnostics")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def admin_system_info(self, query):
        """–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"""
        total_stats = db.get_total_stats()
        users = db.get_all_users()
        
        message = f"""‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

üîç –°–∏—Å—Ç–µ–º–∞:
‚Ä¢ –û–°: {platform.system()} {platform.release()}
‚Ä¢ Python: {sys.version.split()[0]}
‚Ä¢ –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}
‚Ä¢ –í—Å—å–æ–≥–æ –µ—Ñ—ñ—Ä—ñ–≤: {total_stats.get('total_sessions', 0)}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_stats.get('total_duration', 0))}
‚Ä¢ –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(total_stats.get('total_diamonds', 0))}

üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:
‚Ä¢ –ê–¥–º—ñ–Ω ID: {ADMIN_USER_IDS}
‚Ä¢ Rate Limit: {RATE_LIMIT_MESSAGES} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ {RATE_LIMIT_PERIOD}—Å
‚Ä¢ –ú–∞–∫—Å —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {MAX_FILE_SIZE // (1024*1024)}MB

üïê –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def commands_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /commands - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        username = update.effective_user.username or "–Ω–µ–º–∞—î username"
        is_admin = self.is_admin(user_id)
        
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        commands_message = """ü§ñ **TikTok Live Analytics Bot - –ö–æ–º–∞–Ω–¥–∏**

üìã **–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ `/start` - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ `/menu` - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏  
‚Ä¢ `/myid` - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à Telegram ID —Ç–∞ —Å—Ç–∞—Ç—É—Å
‚Ä¢ `/commands` - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ `/help` - –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é

üìä **–§—É–Ω–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ –º–µ–Ω—é:**
‚Ä¢ üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏
‚Ä¢ üèÜ –¢–æ–ø –µ—Ñ—ñ—Ä–∏ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
‚Ä¢ üåç –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
‚Ä¢ üìÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
‚Ä¢ ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é

üì∏ **–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:**
1. –ó—Ä–æ–±—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TikTok Live
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –±–æ—Ç—É
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
4. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ `/menu`"""

        # –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω
        if is_admin:
            commands_message += """

üîß **–ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ `/admin` - –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º —Å–∏—Å—Ç–µ–º–æ—é

üéØ **–ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
‚Ä¢ üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥–∏
‚Ä¢ üîß –°–∏—Å—Ç–µ–º–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ üìÅ –ï–∫—Å–ø–æ—Ä—Ç –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
‚Ä¢ üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
‚Ä¢ üìã –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤ —Å–∏—Å—Ç–µ–º–∏"""

        commands_message += """

üí° **–ü—ñ–¥–∫–∞–∑–∫–∏:**
‚Ä¢ –î–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —è–∫—ñ—Å–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
‚Ä¢ –í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –±–µ–∑–ø–µ—á–Ω–æ —Ç–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ
‚Ä¢ –ë–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤–∏ OCR

üÜò **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?** –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/help` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"""

        await update.message.reply_text(commands_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help - –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        help_message = """‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞ TikTok Live Analytics Bot

üéØ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:
1. üì∏ –ó—Ä–æ–±—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TikTok Live
2. üì® –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –±–æ—Ç—É  
3. ‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
4. üìä –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ `/menu`

üîß –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
‚Ä¢ `/start` - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
‚Ä¢ `/menu` - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
‚Ä¢ `/commands` - –ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
‚Ä¢ `/myid` - –í–∞—à Telegram ID
‚Ä¢ `/help` - –¶—è –¥–æ–≤—ñ–¥–∫–∞

üåç –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:
‚Ä¢ üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞

üí° –ü–æ—Ä–∞–¥–∏:
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —è–∫—ñ—Å–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ç–µ–∫—Å—Ç –¥–æ–±—Ä–µ —á–∏—Ç–∞—î—Ç—å—Å—è
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: 10MB

üÜò –ü—Ä–æ–±–ª–µ–º–∏?
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ `/commands` –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""

        await update.message.reply_text(help_message)

    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏"""
        if not self.application:
            return
            
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        self.application.add_handler(CommandHandler("myid", self.myid_command))
        self.application.add_handler(CommandHandler("commands", self.commands_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    def run_bot(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        # –¢–µ—Å—Ç OCR
        if ocr_processor.test_ocr_installation():
            logger.info("OCR —Ç–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ")
        else:
            logger.warning("–ü—Ä–æ–±–ª–µ–º–∏ –∑ OCR - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Tesseract")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
            return
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–æ–º
        logger.info("–ó–∞–ø—É—Å–∫ TikTok Stats Bot –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –∑–≤—ñ—Ç–∞–º–∏...")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        import threading
        
        def run_scheduler():
            """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(start_scheduler(self.application))
            
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
        self.application.run_polling()

    async def download_summary_report(self, query, user_id: int):
        """–°–∫–∞—á–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç"""
        try:
            await query.edit_message_text("üì• –ì–µ–Ω–µ—Ä—É—é –∑–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç...")
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ
            report_data = db.get_summary_report_with_holidays(30)
            
            if not report_data:
                await query.edit_message_text("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É.")
                return
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ CSV —Ñ–∞–π–ª
            filepath = create_csv_report(report_data, "summary")
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª
            with open(filepath, 'rb') as file:
                await query.message.reply_document(
                    document=file,
                    filename=os.path.basename(filepath),
                    caption=f"üìä –ó–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç TikTok Analytics\nüìÖ –ü–µ—Ä—ñ–æ–¥: –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(report_data)}"
                )
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª
            os.unlink(filepath)
            
            await query.edit_message_text("‚úÖ –ó–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def download_all_reports(self, query, user_id: int):
        """–°–∫–∞—á–∞—Ç–∏ –≤—Å—ñ –¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            await query.edit_message_text("üì• –ì–µ–Ω–µ—Ä—É—é –∑–≤—ñ—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —á–∞—Å.")
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–≤—ñ—Ç–∏
            all_reports = db.get_all_users_detailed_report(30)
            
            if not all_reports:
                await query.edit_message_text("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—ñ–≤.")
                return
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            files_created = create_all_users_csv_package(all_reports)
            
            if not files_created:
                await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª–∏ –∑–≤—ñ—Ç—ñ–≤.")
                return
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª–∏ (–º–∞–∫—Å–∏–º—É–º 10 –∑–∞ —Ä–∞–∑)
            for i, filepath in enumerate(files_created[:10]):
                try:
                    with open(filepath, 'rb') as file:
                        nickname = os.path.basename(filepath).replace('tiktok_detail_', '').split('_')[0]
                        await query.message.reply_document(
                            document=file,
                            filename=os.path.basename(filepath),
                            caption=f"üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç: {nickname}\nüìÖ –ü–µ—Ä—ñ–æ–¥: –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
                        )
                    
                    # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                    os.unlink(filepath)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É {filepath}: {e}")
                    continue
            
            total_sent = min(len(files_created), 10)
            message = f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {total_sent} –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤!"
            
            if len(files_created) > 10:
                message += f"\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10 –∑ {len(files_created)} –∑–≤—ñ—Ç—ñ–≤."
            
            await query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–≤—ñ—Ç—ñ–≤: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def download_user_report(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É –∑–≤—ñ—Ç—É"""
        try:
            users = db.get_all_users()
            
            if not users:
                await query.edit_message_text("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∑–≤—ñ—Ç—É.")
                return
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            keyboard = []
            for user in users[:20]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏—Ö 20
                nickname = user.get('tiktok_nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
                telegram_id = user.get('telegram_id', 0)
                keyboard.append([InlineKeyboardButton(f"üë§ {nickname}", callback_data=f"user_report_{telegram_id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üë§ –û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É:", reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

    async def download_holiday_report(self, query, user_id: int):
        """–°–∫–∞—á–∞—Ç–∏ –∑–≤—ñ—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤"""
        try:
            await query.edit_message_text("üì• –ì–µ–Ω–µ—Ä—É—é –∑–≤—ñ—Ç –∑ –≤–∏—Ö—ñ–¥–Ω–∏–º–∏ –¥–Ω—è–º–∏...")
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –≤–∏—Ö—ñ–¥–Ω–∏–º–∏
            report_data = db.get_summary_report_with_holidays(30)
            
            if not report_data:
                await query.edit_message_text("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É.")
                return
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ CSV —Ñ–∞–π–ª –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            filepath = create_csv_report(report_data, "summary")
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª
            with open(filepath, 'rb') as file:
                await query.message.reply_document(
                    document=file,
                    filename=f"tiktok_holidays_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    caption=f"üìä –ó–≤—ñ—Ç –∑ –≤–∏—Ö—ñ–¥–Ω–∏–º–∏ –¥–Ω—è–º–∏\nüìÖ –ü–µ—Ä—ñ–æ–¥: –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(report_data)}\nüå¥ –í–∫–ª—é—á–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ"
                )
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª
            os.unlink(filepath)
            
            await query.edit_message_text("‚úÖ –ó–≤—ñ—Ç –∑ –≤–∏—Ö—ñ–¥–Ω–∏–º–∏ –¥–Ω—è–º–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –∑ –≤–∏—Ö—ñ–¥–Ω–∏–º–∏: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def generate_individual_user_report(self, query, target_user_id: int):
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            await query.edit_message_text("üì• –ì–µ–Ω–µ—Ä—É—é —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç...")
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data = db.get_user(target_user_id)
            if not user_data:
                await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
                return
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            detailed_data = db.get_detailed_user_report(target_user_id, 30)
            
            if not detailed_data:
                await query.edit_message_text(f"‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_data['tiktok_nickname']}.")
                return
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ CSV —Ñ–∞–π–ª
            nickname = user_data['tiktok_nickname']
            filepath = create_user_detailed_csv(user_data, detailed_data, nickname)
            
            # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_days = len(detailed_data)
            active_days = len([d for d in detailed_data if d.get('sessions_count', 0) > 0])
            holiday_days = len([d for d in detailed_data if d.get('is_holiday', 0) > 0])
            total_diamonds = sum(d.get('total_diamonds', 0) for d in detailed_data)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª
            with open(filepath, 'rb') as file:
                await query.message.reply_document(
                    document=file,
                    filename=os.path.basename(filepath),
                    caption=f"""üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç: {nickname}
üìÖ –ü–µ—Ä—ñ–æ–¥: –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
üìà –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–Ω—ñ–≤: {active_days}/{total_days}
üå¥ –í–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤: {holiday_days}
üíé –ó–∞–≥–∞–ª—å–Ω–∞ –∫-—Ç—å –∞–ª–º–∞–∑—ñ–≤: {format_number(total_diamonds)}

üìã –ó–≤—ñ—Ç –º—ñ—Å—Ç–∏—Ç—å –ø–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤."""
                )
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª
            os.unlink(filepath)
            
            await query.edit_message_text(f"‚úÖ –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è {nickname} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def download_my_report(self, query, user_id: int):
        """–°–∫–∞—á–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            await query.edit_message_text("üì• –ì–µ–Ω–µ—Ä—É—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç...")
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data = db.get_user(user_id)
            if not user_data:
                await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.")
                return
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞ 30 –¥–Ω—ñ–≤
            detailed_data = db.get_detailed_user_report(user_id, 30)
            
            if not detailed_data:
                await query.edit_message_text("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É. –ü–æ—á–Ω—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏!")
                return
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ CSV —Ñ–∞–π–ª
            nickname = user_data['tiktok_nickname']
            filepath = create_user_detailed_csv(user_data, detailed_data, nickname)
            
            # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–ø–∏—Å—É
            total_days = len(detailed_data)
            active_days = len([d for d in detailed_data if d.get('sessions_count', 0) > 0])
            holiday_days = len([d for d in detailed_data if d.get('is_holiday', 0) > 0])
            total_sessions = sum(d.get('sessions_count', 0) for d in detailed_data)
            total_diamonds = sum(d.get('total_diamonds', 0) for d in detailed_data)
            total_duration = sum(d.get('total_duration', 0) for d in detailed_data)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª
            with open(filepath, 'rb') as file:
                await query.message.reply_document(
                    document=file,
                    filename=f"my_tiktok_report_{nickname}_{datetime.now().strftime('%Y%m%d')}.csv",
                    caption=f"""üìä –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç TikTok

üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {nickname}
üìÖ –ü–µ—Ä—ñ–æ–¥: –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å—å–æ–≥–æ –¥–Ω—ñ–≤ —É –∑–≤—ñ—Ç—ñ: {total_days}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–Ω—ñ–≤: {active_days}
‚Ä¢ –í–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤: {holiday_days}
‚Ä¢ –í—Å—å–æ–≥–æ –µ—Ñ—ñ—Ä—ñ–≤: {total_sessions}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_duration)}
‚Ä¢ –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(total_diamonds)}

üìã –ó–≤—ñ—Ç –º—ñ—Å—Ç–∏—Ç—å –ø–æ–¥–µ–Ω–Ω—É –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤.
–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª —É Excel –∞–±–æ Google Sheets."""
                )
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª
            os.unlink(filepath)
            
            await query.edit_message_text("‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –¥–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def show_admin_detailed_reports(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤"""
        message = """üìä –†–æ–∑—à–∏—Ä–µ–Ω—ñ –∑–≤—ñ—Ç–∏ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞—Ö

–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É:
‚Ä¢ üìÖ –î–µ–Ω—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å
‚Ä¢ üìÜ –¢–∏–∂–¥–µ–Ω—å - –ø–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å  
‚Ä¢ üóìÔ∏è –ú—ñ—Å—è—Ü—å - –ø–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å

–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –ø–æ –¥–Ω—è—Ö —Ç–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–∏—Ö—ñ–¥–Ω–∏—Ö."""
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ó–∞ –¥–µ–Ω—å", callback_data="detailed_period_day"),
             InlineKeyboardButton("üìÜ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="detailed_period_week")],
            [InlineKeyboardButton("üóìÔ∏è –ó–∞ –º—ñ—Å—è—Ü—å", callback_data="detailed_period_month")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_detailed_period_menu(self, query, period: str):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É"""
        period_names = {
            'day': 'üìÖ –¥–µ–Ω—å',
            'week': 'üìÜ —Ç–∏–∂–¥–µ–Ω—å', 
            'month': 'üóìÔ∏è –º—ñ—Å—è—Ü—å'
        }
        
        period_name = period_names.get(period, period)
        
        try:
            users = db.get_all_users()
            
            if not users:
                await query.edit_message_text("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∑–≤—ñ—Ç—É.")
                return
            
            message = f"üë• –û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –∑–∞ {period_name}:"
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            keyboard = []
            for user in users[:15]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏—Ö 15
                nickname = user.get('tiktok_nickname', '–ù–µ–≤—ñ–¥–æ–º–æ')
                telegram_id = user.get('telegram_id', 0)
                keyboard.append([InlineKeyboardButton(f"üë§ {nickname}", callback_data=f"detailed_user_{period}_{telegram_id}")])
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É", callback_data="admin_detailed_reports")])
            keyboard.append([InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")])
            
            if len(users) > 15:
                message += f"\n\nüìã –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à–∏—Ö 15 –∑ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

    async def show_detailed_user_stats(self, query, target_user_id: int, period: str):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É
            days_map = {
                'day': 1,
                'week': 7,
                'month': 30
            }
            
            period_names = {
                'day': '–∑–∞ –¥–µ–Ω—å',
                'week': '–∑–∞ —Ç–∏–∂–¥–µ–Ω—å',
                'month': '–∑–∞ –º—ñ—Å—è—Ü—å'
            }
            
            days = days_map.get(period, 7)
            period_name = period_names.get(period, period)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data = db.get_user(target_user_id)
            if not user_data:
                await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
                return
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            detailed_data = db.get_detailed_user_report(target_user_id, days)
            
            if not detailed_data:
                await query.edit_message_text(f"‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_data['tiktok_nickname']} {period_name}.")
                return
            
            nickname = user_data['tiktok_nickname']
            
            # –§–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = f"üìä –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–≤—ñ—Ç: {nickname} {period_name}\n\n"
            
            # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_days = len(detailed_data)
            active_days = len([d for d in detailed_data if d.get('sessions_count', 0) > 0])
            holiday_days = len([d for d in detailed_data if d.get('is_holiday', 0) > 0])
            total_sessions = sum(d.get('sessions_count', 0) for d in detailed_data)
            total_duration = sum(d.get('total_duration', 0) for d in detailed_data)
            total_viewers = sum(d.get('total_viewers', 0) for d in detailed_data)
            total_diamonds = sum(d.get('total_diamonds', 0) for d in detailed_data)
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            message += f"‚Ä¢ –ü–µ—Ä—ñ–æ–¥: {total_days} –¥–Ω—ñ–≤\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–Ω—ñ–≤: {active_days}\n"
            message += f"‚Ä¢ –í–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤: {holiday_days}\n"
            message += f"‚Ä¢ –í—Å—å–æ–≥–æ –µ—Ñ—ñ—Ä—ñ–≤: {total_sessions}\n"
            message += f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_duration(total_duration)}\n"
            message += f"‚Ä¢ –í—Å—å–æ–≥–æ –≥–ª—è–¥–∞—á—ñ–≤: {format_number(total_viewers)}\n"
            message += f"‚Ä¢ –í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: {format_number(total_diamonds)}\n\n"
            
            # –ü–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å—Ç–∞–Ω–Ω—ñ 10 –¥–Ω—ñ–≤ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ)
            message += f"üìÖ –ü–æ–¥–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            for day in detailed_data[:10]:
                date = datetime.strptime(day['date'], '%Y-%m-%d').strftime('%d.%m')
                status = "üå¥" if day.get('is_holiday', 0) else "üì∫"
                sessions = day.get('sessions_count', 0)
                duration = day.get('total_duration', 0)
                diamonds = day.get('total_diamonds', 0)
                
                if sessions > 0:
                    message += f"{status} {date}: {sessions} –µ—Ñ—ñ—Ä—ñ–≤, {format_duration(duration)}, {format_number(diamonds)} üíé\n"
                else:
                    message += f"{status} {date}: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n"
            
            if len(detailed_data) > 10:
                message += f"\n... —Ç–∞ —â–µ {len(detailed_data) - 10} –¥–Ω—ñ–≤"
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            keyboard = [
                [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç", callback_data=f"download_detailed_{period}_{target_user_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data=f"detailed_period_{period}")],
                [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def download_detailed_user_report(self, query, target_user_id: int, period: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ CSV"""
        try:
            # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É
            days_map = {
                'day': 1,
                'week': 7,
                'month': 30
            }
            
            period_names = {
                'day': '–¥–µ–Ω—å',
                'week': '—Ç–∏–∂–¥–µ–Ω—å',
                'month': '–º—ñ—Å—è—Ü—å'
            }
            
            days = days_map.get(period, 7)
            period_name = period_names.get(period, period)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data = db.get_user(target_user_id)
            if not user_data:
                await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
                return
            
            nickname = user_data['tiktok_nickname']
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            detailed_data = db.get_detailed_user_report(target_user_id, days)
            
            if not detailed_data:
                await query.edit_message_text(f"‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –¥–ª—è {nickname}")
                return
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ CSV —Ñ–∞–π–ª
            filepath = create_user_detailed_csv(user_data, detailed_data, nickname)
            
            if not filepath:
                await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è CSV –¥–ª—è {nickname}")
                return
            
            # –§–∞–π–ª –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ—î—é create_user_detailed_csv
            filename = os.path.basename(filepath)
            
            # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è caption
            total_days = len(detailed_data)
            active_days = len([d for d in detailed_data if d.get('sessions_count', 0) > 0])
            holiday_days = len([d for d in detailed_data if d.get('is_holiday', 0) > 0])
            
            caption = f"üìä –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–≤—ñ—Ç: {nickname} –∑–∞ {period_name}\n"
            caption += f"üìÖ –ü–µ—Ä—ñ–æ–¥: {total_days} –¥–Ω—ñ–≤\n"
            caption += f"üì∫ –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–Ω—ñ–≤: {active_days}\n"
            caption += f"üå¥ –í–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤: {holiday_days}"
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª
            with open(filepath, 'rb') as f:
                await query.message.reply_document(
                    document=f,
                    filename=filename,
                    caption=caption
                )
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            try:
                os.remove(filepath)
            except:
                pass
            
            await query.edit_message_text(f"‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è {nickname} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    async def show_maintenance_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
        maintenance_info = db.get_maintenance_info()
        is_enabled = maintenance_info.get('enabled', False)
        
        if is_enabled:
            timestamp = maintenance_info.get('timestamp', '')
            message = maintenance_info.get('message', '')
            
            if timestamp:
                try:
                    dt = datetime.fromisoformat(timestamp)
                    formatted_time = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    formatted_time = timestamp
            else:
                formatted_time = '–ù–µ–≤—ñ–¥–æ–º–æ'
            
            status_text = f"""üîß –¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è

üî¥ **–†–µ–∂–∏–º –ê–ö–¢–ò–í–ù–ò–ô**
üïê –í–∫–ª—é—á–µ–Ω–æ: {formatted_time}"""
            
            if message:
                status_text += f"\nüìã –ü—Ä–∏—á–∏–Ω–∞: {message}"
            
            status_text += "\n\n‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏"
            
            keyboard = [
                [InlineKeyboardButton("üî¥ –í–∏–º–∫–Ω—É—Ç–∏ —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="maintenance_disable")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="maintenance_status")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
            ]
        else:
            status_text = """üîß –¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è

üü¢ **–†–µ–∂–∏–º –ù–ï–ê–ö–¢–ò–í–ù–ò–ô**
‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏"""
            
            keyboard = [
                [InlineKeyboardButton("üî¥ –í–∫–ª—é—á–∏—Ç–∏ —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="maintenance_enable")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="maintenance_status")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(status_text, reply_markup=reply_markup)

    async def enable_maintenance_mode(self, query):
        """–í–∫–ª—é—á–∏—Ç–∏ —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
        # –í–∫–ª—é—á–∏—Ç–∏ —Ä–µ–∂–∏–º –±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –¥–æ–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ)
        success = db.set_maintenance_mode(True, "–ü–ª–∞–Ω–æ–≤–µ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è")
        
        if success:
            message = """üîß –†–µ–∂–∏–º —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –í–ö–õ–Æ–ß–ï–ù–û

üî¥ **–°—Ç–∞—Ç—É—Å**: –ê–ö–¢–ò–í–ù–ò–ô
‚è∞ **–ß–∞—Å**: {current_time}
üìã **–ü—Ä–∏—á–∏–Ω–∞**: –ü–ª–∞–Ω–æ–≤–µ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è

‚ö†Ô∏è **–©–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î:**
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
‚Ä¢ –í–æ–Ω–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º—É—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
‚Ä¢ –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏ –ø—Ä–æ–¥–æ–≤–∂—É—é—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏

‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚Ä¢ –í–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–≤—ñ—Ç–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
‚Ä¢ –í–∏–º–∫–Ω—ñ—Ç—å —Ä–µ–∂–∏–º –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

üîô –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è""".format(
                current_time=datetime.now().strftime('%d.%m.%Y %H:%M')
            )
            
            keyboard = [
                [InlineKeyboardButton("üî¥ –í–∏–º–∫–Ω—É—Ç–∏ —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="maintenance_disable")],
                [InlineKeyboardButton("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å", callback_data="maintenance_status")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="admin_maintenance")]
            ]
        else:
            message = "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="admin_maintenance")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def disable_maintenance_mode(self, query):
        """–í–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
        success = db.set_maintenance_mode(False)
        
        if success:
            message = """üîß –†–µ–∂–∏–º —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –í–ò–ú–ö–ù–ï–ù–û

üü¢ **–°—Ç–∞—Ç—É—Å**: –ù–ï–ê–ö–¢–ò–í–ù–ò–ô
‚è∞ **–ß–∞—Å**: {current_time}

‚úÖ **–©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è:**
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–Ω–æ–≤—É –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
‚Ä¢ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
‚Ä¢ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ

üöÄ **–ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!**""".format(
                current_time=datetime.now().strftime('%d.%m.%Y %H:%M')
            )
            
            keyboard = [
                [InlineKeyboardButton("üî¥ –í–∫–ª—é—á–∏—Ç–∏ —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="maintenance_enable")],
                [InlineKeyboardButton("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å", callback_data="maintenance_status")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="admin_maintenance")]
            ]
        else:
            message = "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="admin_maintenance")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_maintenance_status(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
        maintenance_info = db.get_maintenance_info()
        is_enabled = maintenance_info.get('enabled', False)
        
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        
        if is_enabled:
            timestamp = maintenance_info.get('timestamp', '')
            message = maintenance_info.get('message', '')
            
            if timestamp:
                try:
                    dt = datetime.fromisoformat(timestamp)
                    formatted_time = dt.strftime('%d.%m.%Y %H:%M:%S')
                    
                    # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
                    duration = datetime.now() - dt
                    duration_str = str(duration).split('.')[0]  # –í–∏–¥–∞–ª–∏—Ç–∏ –º—ñ–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∏
                except:
                    formatted_time = timestamp
                    duration_str = "–ù–µ–≤—ñ–¥–æ–º–æ"
            else:
                formatted_time = '–ù–µ–≤—ñ–¥–æ–º–æ'
                duration_str = "–ù–µ–≤—ñ–¥–æ–º–æ"
            
            status_text = f"""üîß –î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è

üî¥ **–†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ù–ò–ô**
üìÖ –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {current_time}
üïê –í–∫–ª—é—á–µ–Ω–æ: {formatted_time}
‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_str}

üìã **–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è:**
{message or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

‚ö†Ô∏è **–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:**
‚Ä¢ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–ª–æ–∫—É—é—Ç—å—Å—è
‚Ä¢ –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ
‚Ä¢ –ó–≤—ñ—Ç–∏ –º–æ–∂–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏

üë• **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:**
"üîß –¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
‚è≥ –ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤"

üîß **–î—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ –í–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–≤—ñ—Ç–∏
‚Ä¢ –í–∏–º–∫–Ω—ñ—Ç—å —Ä–µ–∂–∏–º –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""
        else:
            status_text = f"""üîß –î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è

üü¢ **–†–ï–ñ–ò–ú –ù–ï–ê–ö–¢–ò–í–ù–ò–ô**
üìÖ –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {current_time}
‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ

üë• **–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:**
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
‚Ä¢ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å
‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–∏–π

üöÄ **–ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ —Ä–æ–±–æ—Ç–∏: 100%**"""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data="maintenance_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é —Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", callback_data="admin_maintenance")],
            [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(status_text, reply_markup=reply_markup)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
        return
    
    bot = TikTokStatsBot()
    
    try:
        bot.run_bot()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main() 